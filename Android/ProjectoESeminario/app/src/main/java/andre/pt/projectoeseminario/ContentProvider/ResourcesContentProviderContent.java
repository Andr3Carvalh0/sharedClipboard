package andre.pt.projectoeseminario.ContentProvider;


import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import andre.pt.projectoeseminario.ContentProvider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class ResourcesContentProviderContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + ResourcesContentProviderProvider.AUTHORITY);

    private ResourcesContentProviderContent() {
    }

    /**
     * Created in version 1
     */
    public static final class Text extends ResourcesContentProviderContent {

        private static final String LOG_TAG = Text.class.getSimpleName();

        public static final String TABLE_NAME = "text";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/resourcescontentprovider-text";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/resourcescontentprovider-text";

        public static final Uri CONTENT_URI = Uri.parse(ResourcesContentProviderContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CONTENT("content", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.CONTENT.getName()
        };

        private Text() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Text | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Text | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Text | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Text | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CONTENT.getName()).append(" ) VALUES (?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class Contacts extends ResourcesContentProviderContent {

        private static final String LOG_TAG = Contacts.class.getSimpleName();

        public static final String TABLE_NAME = "contacts";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/resourcescontentprovider-contacts";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/resourcescontentprovider-contacts";

        public static final Uri CONTENT_URI = Uri.parse(ResourcesContentProviderContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CONTENT("content", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.CONTENT.getName()
        };

        private Contacts() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Contacts | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Contacts | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Contacts | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Contacts | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CONTENT.getName()).append(" ) VALUES (?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class Links extends ResourcesContentProviderContent {

        private static final String LOG_TAG = Links.class.getSimpleName();

        public static final String TABLE_NAME = "links";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/resourcescontentprovider-links";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/resourcescontentprovider-links";

        public static final Uri CONTENT_URI = Uri.parse(ResourcesContentProviderContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CONTENT("content", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.CONTENT.getName()
        };

        private Links() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Links | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Links | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Links | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Links | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CONTENT.getName()).append(" ) VALUES (?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class Recent extends ResourcesContentProviderContent {

        private static final String LOG_TAG = Recent.class.getSimpleName();

        public static final String TABLE_NAME = "recent";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/resourcescontentprovider-recent";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/resourcescontentprovider-recent";

        public static final Uri CONTENT_URI = Uri.parse(ResourcesContentProviderContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CONTENT("content", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.CONTENT.getName()
        };

        private Recent() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Recent | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.CONTENT.getName() + " " + Columns.CONTENT.getType() + ", UNIQUE (" + Columns.ID.getName() + ")" + ");");

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Recent | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Recent | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (ResourcesContentProviderProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Recent | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.CONTENT.getName()).append(" ) VALUES (?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.CONTENT.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

